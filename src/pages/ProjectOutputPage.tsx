import React from 'react';
import { useLocation, useNavigate } from 'react-router-dom';
import { Card, CardContent, CardHeader, CardTitle, CardFooter } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { ArrowLeft, Loader2, AlertTriangle } from 'lucide-react';
import { useQuery } from '@tanstack/react-query';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";

const fetchWebhookData = async (url: string) => {
  const response = await fetch(url);
  if (!response.ok) {
    const errorText = await response.text().catch(() => 'Failed to retrieve error details');
    throw new Error(`Network response was not ok: ${response.status} ${response.statusText}. ${errorText}`);
  }
  // Try to parse as JSON, but fall back to text if it fails
  const contentType = response.headers.get("content-type");
  if (contentType && contentType.indexOf("application/json") !== -1) {
    return response.json();
  } else {
    return response.text();
  }
};

const ProjectOutputPage: React.FC = () => {
  const location = useLocation();
  const navigate = useNavigate();
  const { projectData, projectId } = location.state || {}; // Expecting projectData and projectId

  if (!projectData) {
    return (
      <div className="min-h-screen w-full bg-background text-foreground flex flex-col items-center justify-center p-4 sm:p-8 selection:bg-neon-green/50 selection:text-white">
        <Card className="w-full max-w-2xl bg-card shadow-xl shadow-neon-green/30 border border-neon-green/50">
          <CardHeader>
            <CardTitle className="text-2xl font-bold glowing-text text-center">
              Project Output
            </CardTitle>
          </CardHeader>
          <CardContent>
            <p className="text-center text-muted-foreground">
              No project data found. Please submit the questionnaire first.
            </p>
          </CardContent>
          <CardFooter className="flex justify-center">
            <Button
              variant="outline"
              onClick={() => navigate('/')}
              className="border-neon-green text-neon-green hover:bg-neon-green/10"
            >
              <ArrowLeft className="mr-2 h-4 w-4" /> Back to Questionnaire
            </Button>
          </CardFooter>
        </Card>
      </div>
    );
  }

  const webhookUrl = "http://localhost:5678/webhook-test/1dfc5ecb-6b36-4fa6-a0ba-d62b03acc99b";

  const { data: webhookResponse, isLoading, isError, error } = useQuery({
    queryKey: ['webhookData', webhookUrl],
    queryFn: () => fetchWebhookData(webhookUrl),
    enabled: !!projectId, // Only fetch if projectId is available (meaning submission was likely successful)
    retry: 1, // Only retry once for this example
  });

  const imageUrl = `https://images.unsplash.com/photo-1488590528505-98d2b5aba04b?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=800&q=80`;

  return (
    <div className="min-h-screen w-full bg-background text-foreground flex flex-col items-center p-4 sm:p-8 selection:bg-neon-green/50 selection:text-white">
      <header className="w-full max-w-4xl flex justify-between items-center mb-12 text-center">
        <Button
            variant="outline"
            onClick={() => navigate('/')}
            className="border-neon-green text-neon-green hover:bg-neon-green/10 absolute left-4 sm:left-8 top-4 sm:top-8"
          >
            <ArrowLeft className="mr-2 h-4 w-4" /> Back
          </Button>
        <div className="flex-grow text-center">
          <h1 className="text-3xl sm:text-4xl font-extrabold tracking-tight glowing-text mt-16 sm:mt-0">
            Submission Successful!
          </h1>
        </div>
      </header>
      <Card className="w-full max-w-2xl bg-card shadow-xl shadow-neon-green/30 border border-neon-green/50 mb-8">
        <CardHeader>
          <CardTitle className="text-xl sm:text-2xl font-bold glowing-text text-center">
            Thank You!
          </CardTitle>
        </CardHeader>
        <CardContent className="text-center space-y-6">
          <img 
            src={imageUrl}
            alt="Laptop on a desk" 
            className="rounded-md mx-auto max-h-60 sm:max-h-80 object-cover shadow-lg border border-neon-green/30"
          />
          <p className="text-base sm:text-lg text-foreground/90">
            Your prompt (ID: <span className="font-semibold text-neon-green">{projectId || 'N/A'}</span>) is ready to copy from the Supabase Database.
          </p>
          <p className="text-sm sm:text-base text-muted-foreground">
            In n8n, you will find the output generated by the UI/UX designer agent once processed (if webhook was provided).
          </p>
        </CardContent>
         <CardFooter className="flex flex-col sm:flex-row justify-center sm:justify-end gap-4 pt-6">
            <Button
              onClick={() => navigate('/')}
              className="w-full sm:w-auto bg-neon-green text-primary-foreground hover:bg-neon-green-darker"
            >
              Start New Project
            </Button>
          </CardFooter>
      </Card>

      <Card className="w-full max-w-2xl bg-card shadow-xl shadow-neon-green/30 border border-neon-green/50">
        <CardHeader>
          <CardTitle className="text-xl sm:text-2xl font-bold glowing-text text-center">
            Webhook Test Results
          </CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          {isLoading && (
            <div className="flex items-center justify-center p-4">
              <Loader2 className="mr-2 h-6 w-6 animate-spin text-neon-green" />
              <p className="text-muted-foreground">Fetching webhook data...</p>
            </div>
          )}
          {isError && error && (
            <Alert variant="destructive" className="bg-red-900/30 border-red-500/50 text-red-300">
              <AlertTriangle className="h-5 w-5 text-red-400" />
              <AlertTitle className="font-semibold text-red-300">Error Fetching Webhook Data</AlertTitle>
              <AlertDescription>
                <p>Could not fetch data from: <code className="text-xs bg-red-900/50 p-1 rounded">{webhookUrl}</code></p>
                <p className="mt-2">Details: {error.message}</p>
                <p className="mt-2 text-xs">Note: This URL might only be accessible in a local development environment.</p>
              </AlertDescription>
            </Alert>
          )}
          {webhookResponse && !isLoading && !isError && (
             <div>
              <h3 className="text-lg font-semibold mb-2 text-neon-green-lighter">Received Data:</h3>
              <pre className="bg-gray-800/50 p-4 rounded-md text-sm overflow-x-auto border border-neon-green/30 text-gray-300">
                {typeof webhookResponse === 'string' ? webhookResponse : JSON.stringify(webhookResponse, null, 2)}
              </pre>
            </div>
          )}
        </CardContent>
      </Card>

      <footer className="mt-12 text-center text-sm text-muted-foreground">
        <p>&copy; {new Date().getFullYear()} Project Requirements Collector. All rights reserved.</p>
      </footer>
    </div>
  );
};

export default ProjectOutputPage;
